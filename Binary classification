{"metadata":{"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":532013,"sourceType":"datasetVersion","datasetId":253160}],"dockerImageVersionId":30788,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.14"},"papermill":{"default_parameters":{},"duration":8563.431835,"end_time":"2024-09-28T11:27:09.456834","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-09-28T09:04:26.024999","version":"2.6.0"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# import the all libraries \nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow.keras import layers, models\nimport os\nimport keras\nfrom sklearn.model_selection import StratifiedKFold\n#from keras.layers.core import Dropout\nimport cv2\nimport PIL\nfrom tensorflow.keras.models import Sequential\nfrom keras.regularizers import l2\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense\nfrom keras.applications.inception_v3 import InceptionV3\nimport tensorflow as tf\nimport shutil\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.utils import resample\nfrom imblearn.under_sampling import RandomUnderSampler\nimport numpy as np\nfrom tensorflow.keras.applications import ResNet50, InceptionV3\nfrom tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Dropout, Flatten\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras import layers, models, callbacks\nfrom tensorflow.keras import layers, models\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.applications import EfficientNetB1,EfficientNetB4, EfficientNetB0\nfrom PIL import Image","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","papermill":{"duration":16.290071,"end_time":"2024-09-28T09:04:45.390016","exception":false,"start_time":"2024-09-28T09:04:29.099945","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-10-12T04:45:49.786798Z","iopub.execute_input":"2024-10-12T04:45:49.787104Z","iopub.status.idle":"2024-10-12T04:46:03.975972Z","shell.execute_reply.started":"2024-10-12T04:45:49.787070Z","shell.execute_reply":"2024-10-12T04:46:03.975184Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"#let see the GPU\ngpus = tf.config.list_physical_devices('GPU')\nprint(\"Num GPUs Available: \", len(gpus))\nprint(\"GPU Details:\", gpus)","metadata":{"papermill":{"duration":0.244767,"end_time":"2024-09-28T09:04:45.642039","exception":false,"start_time":"2024-09-28T09:04:45.397272","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-10-12T04:46:28.268709Z","iopub.execute_input":"2024-10-12T04:46:28.269382Z","iopub.status.idle":"2024-10-12T04:46:28.470982Z","shell.execute_reply.started":"2024-10-12T04:46:28.269341Z","shell.execute_reply":"2024-10-12T04:46:28.469914Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"Num GPUs Available:  1\nGPU Details: [PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Load the data","metadata":{}},{"cell_type":"code","source":"#load the data set \ndata_csv = pd.read_csv(\"/kaggle/input/resized-2015-2019-blindness-detection-images/labels/trainLabels15.csv\")# Here is  csv file image name and label\ndata_dir = os.listdir('/kaggle/input/resized-2015-2019-blindness-detection-images/resized train 15')# Image folder\n","metadata":{"papermill":{"duration":0.091227,"end_time":"2024-09-28T09:04:45.740435","exception":false,"start_time":"2024-09-28T09:04:45.649208","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-10-12T04:46:33.904000Z","iopub.execute_input":"2024-10-12T04:46:33.904369Z","iopub.status.idle":"2024-10-12T04:46:35.090930Z","shell.execute_reply.started":"2024-10-12T04:46:33.904334Z","shell.execute_reply":"2024-10-12T04:46:35.090092Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"data_csv.info()","metadata":{"papermill":{"duration":0.035908,"end_time":"2024-09-28T09:04:45.783553","exception":false,"start_time":"2024-09-28T09:04:45.747645","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-10-12T04:46:57.806661Z","iopub.execute_input":"2024-10-12T04:46:57.807610Z","iopub.status.idle":"2024-10-12T04:46:57.839293Z","shell.execute_reply.started":"2024-10-12T04:46:57.807568Z","shell.execute_reply":"2024-10-12T04:46:57.838402Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 35126 entries, 0 to 35125\nData columns (total 2 columns):\n #   Column  Non-Null Count  Dtype \n---  ------  --------------  ----- \n 0   image   35126 non-null  object\n 1   level   35126 non-null  int64 \ndtypes: int64(1), object(1)\nmemory usage: 549.0+ KB\n","output_type":"stream"}]},{"cell_type":"code","source":"#clean the data\ndef drop_columns(data_clean):\n    # Drop unnecessary columns\n    #data_clean = data_csv.drop(['Unnamed: 0.1', 'Unnamed: 0'], axis=1)\n    #\n    # Optionally modify the 'image' column to add '.jpeg' extension if it exists\n    if 'image' in data_clean.columns:\n        data_clean['image'] = data_clean['image'] + '.jpg'\n    \n    return data_clean","metadata":{"papermill":{"duration":0.018009,"end_time":"2024-09-28T09:04:45.809094","exception":false,"start_time":"2024-09-28T09:04:45.791085","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-10-12T04:47:02.028954Z","iopub.execute_input":"2024-10-12T04:47:02.029705Z","iopub.status.idle":"2024-10-12T04:47:02.034508Z","shell.execute_reply.started":"2024-10-12T04:47:02.029664Z","shell.execute_reply":"2024-10-12T04:47:02.033512Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"df_data =drop_columns(data_csv)#Here df_data is new variable data\n","metadata":{"papermill":{"duration":0.024846,"end_time":"2024-09-28T09:04:45.841519","exception":false,"start_time":"2024-09-28T09:04:45.816673","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-10-12T04:47:12.219661Z","iopub.execute_input":"2024-10-12T04:47:12.220651Z","iopub.status.idle":"2024-10-12T04:47:12.229886Z","shell.execute_reply.started":"2024-10-12T04:47:12.220609Z","shell.execute_reply":"2024-10-12T04:47:12.229061Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"#make into Binary\ndiagnosis_dict_binary = {\n    0: 'No_DR',\n    1: 'DR',\n    2: 'DR',\n    3: 'DR',\n    4: 'DR'\n}\n\ndiagnosis_dict = {\n    0: 'No_DR',\n    1: 'Mild',\n    2: 'Moderate',\n    3: 'Severe',\n    4: 'Proliferate_DR',\n}\n\n\ndf_data['binary_type'] =  df_data['level'].map(diagnosis_dict_binary.get)\ndf_data['type'] = df_data['level'].map(diagnosis_dict.get)\ndf_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-10-12T04:47:15.966209Z","iopub.execute_input":"2024-10-12T04:47:15.966594Z","iopub.status.idle":"2024-10-12T04:47:15.999677Z","shell.execute_reply.started":"2024-10-12T04:47:15.966557Z","shell.execute_reply":"2024-10-12T04:47:15.998638Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"          image  level binary_type   type\n0   10_left.jpg      0       No_DR  No_DR\n1  10_right.jpg      0       No_DR  No_DR\n2   13_left.jpg      0       No_DR  No_DR\n3  13_right.jpg      0       No_DR  No_DR\n4   15_left.jpg      1          DR   Mild","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>image</th>\n      <th>level</th>\n      <th>binary_type</th>\n      <th>type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10_left.jpg</td>\n      <td>0</td>\n      <td>No_DR</td>\n      <td>No_DR</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10_right.jpg</td>\n      <td>0</td>\n      <td>No_DR</td>\n      <td>No_DR</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>13_left.jpg</td>\n      <td>0</td>\n      <td>No_DR</td>\n      <td>No_DR</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>13_right.jpg</td>\n      <td>0</td>\n      <td>No_DR</td>\n      <td>No_DR</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>15_left.jpg</td>\n      <td>1</td>\n      <td>DR</td>\n      <td>Mild</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# EDA","metadata":{}},{"cell_type":"code","source":"value_counts = df_data['binary_type'].value_counts()                    \n# Plot using matplotlib\nplt.figure(figsize=(8, 6))\nvalue_counts.plot(kind='bar')\nplt.title('Distribution of Diabetic Retinopathy Classes (Total DataSet)')\nplt.xlabel('Diagnosis')\nplt.ylabel('Count')\nplt.xticks(rotation=0)  # Keep the x-axis labels horizontal\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-10-12T04:47:20.495537Z","iopub.execute_input":"2024-10-12T04:47:20.495952Z","iopub.status.idle":"2024-10-12T04:47:20.780449Z","shell.execute_reply.started":"2024-10-12T04:47:20.495912Z","shell.execute_reply":"2024-10-12T04:47:20.779348Z"},"trusted":true},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"#split the data\ntrain_df, val_df = train_test_split(df_data, test_size=0.2,random_state=42)\nprint(train_df.shape)\nprint(val_df.shape)","metadata":{"papermill":{"duration":0.042598,"end_time":"2024-09-28T09:04:45.922730","exception":false,"start_time":"2024-09-28T09:04:45.880132","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-10-12T04:47:24.940807Z","iopub.execute_input":"2024-10-12T04:47:24.941566Z","iopub.status.idle":"2024-10-12T04:47:24.957648Z","shell.execute_reply.started":"2024-10-12T04:47:24.941527Z","shell.execute_reply":"2024-10-12T04:47:24.956619Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"(28100, 4)\n(7026, 4)\n","output_type":"stream"}]},{"cell_type":"code","source":"value_counts = train_df['binary_type'].value_counts()                    \n# Plot using matplotlib\nplt.figure(figsize=(8, 6))\nvalue_counts.plot(kind='bar')\nplt.title('Distribution of Diabetic Retinopathy Classes (Train DataSet)')\nplt.xlabel('Diagnosis')\nplt.ylabel('Count')\nplt.xticks(rotation=0)  # Keep the x-axis labels horizontal\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-10-12T04:47:28.245932Z","iopub.execute_input":"2024-10-12T04:47:28.246640Z","iopub.status.idle":"2024-10-12T04:47:28.446984Z","shell.execute_reply.started":"2024-10-12T04:47:28.246598Z","shell.execute_reply":"2024-10-12T04:47:28.446068Z"},"trusted":true},"execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"IMAGE_SIZE = (255, 255)\nBATCH_SIZE = 16\nNUM_CLASSES = 2\nnum_classes = 2","metadata":{"papermill":{"duration":0.016799,"end_time":"2024-09-28T09:04:45.947988","exception":false,"start_time":"2024-09-28T09:04:45.931189","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-10-12T04:47:32.643670Z","iopub.execute_input":"2024-10-12T04:47:32.644096Z","iopub.status.idle":"2024-10-12T04:47:32.648607Z","shell.execute_reply.started":"2024-10-12T04:47:32.644052Z","shell.execute_reply":"2024-10-12T04:47:32.647613Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"# Define the data generator with augmentation\ntrain_datagen = ImageDataGenerator(   # train data with data augmetataion.\n    rescale=1./255               # Rescale pixel values to [0, 1]\n    )\nval_datagen = ImageDataGenerator(rescale=1./255) #only rescale for Validation data set don need Augmentation.\ntest_datagen = ImageDataGenerator(rescale=1./255)","metadata":{"papermill":{"duration":0.019336,"end_time":"2024-09-28T09:04:45.990229","exception":false,"start_time":"2024-09-28T09:04:45.970893","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-10-12T04:47:54.027144Z","iopub.execute_input":"2024-10-12T04:47:54.027500Z","iopub.status.idle":"2024-10-12T04:47:54.032611Z","shell.execute_reply.started":"2024-10-12T04:47:54.027468Z","shell.execute_reply":"2024-10-12T04:47:54.031661Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"\ntrain_generator = train_datagen.flow_from_dataframe(\n    dataframe=train_df,\n    directory='/kaggle/input/resized-2015-2019-blindness-detection-images/resized train 15',\n    x_col='image',\n    y_col='binary_type',\n    target_size=IMAGE_SIZE,\n    batch_size=BATCH_SIZE,\n    class_mode='binary')\n\nval_generator = val_datagen.flow_from_dataframe(\n    dataframe=val_df,\n    directory= '/kaggle/input/resized-2015-2019-blindness-detection-images/resized train 15',\n    x_col='image',\n    y_col='binary_type',\n    target_size=IMAGE_SIZE,\n    batch_size=BATCH_SIZE,\n    class_mode='binary')","metadata":{"papermill":{"duration":103.001488,"end_time":"2024-09-28T09:06:29.015255","exception":false,"start_time":"2024-09-28T09:04:46.013767","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-10-12T04:47:57.494489Z","iopub.execute_input":"2024-10-12T04:47:57.494885Z","iopub.status.idle":"2024-10-12T04:50:26.844424Z","shell.execute_reply.started":"2024-10-12T04:47:57.494847Z","shell.execute_reply":"2024-10-12T04:50:26.843492Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"Found 28100 validated image filenames belonging to 2 classes.\nFound 7026 validated image filenames belonging to 2 classes.\n","output_type":"stream"}]},{"cell_type":"code","source":"# Number of images to display\nnum_images = 5\n\n# Retrieve a batch of images and labels\nimages, labels = next(train_generator)\n\n# Plotting the images\nplt.figure(figsize=(6, 5))\nfor i in range(num_images):\n    plt.subplot(1, num_images, i + 1)\n    plt.imshow(images[i])  # Display the image\n    plt.axis('off')  # Hide axis\n    plt.title(f'Label: {labels[i]}')  # Display the label\n\nplt.tight_layout()\nplt.show()","metadata":{"papermill":{"duration":2.035862,"end_time":"2024-09-28T09:06:31.059429","exception":false,"start_time":"2024-09-28T09:06:29.023567","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-10-12T04:53:36.283493Z","iopub.execute_input":"2024-10-12T04:53:36.284361Z","iopub.status.idle":"2024-10-12T04:53:37.471098Z","shell.execute_reply.started":"2024-10-12T04:53:36.284322Z","shell.execute_reply":"2024-10-12T04:53:37.470151Z"},"trusted":true},"execution_count":19,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 600x500 with 5 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"#lets see the shape of images and batch size\nfor image_batch, labels_batch in train_generator:\n  print(image_batch.shape)\n  print(labels_batch.shape)\n  break","metadata":{"papermill":{"duration":0.950193,"end_time":"2024-09-28T11:27:05.479089","exception":false,"start_time":"2024-09-28T11:27:04.528896","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-10-12T04:53:40.557158Z","iopub.execute_input":"2024-10-12T04:53:40.557558Z","iopub.status.idle":"2024-10-12T04:53:41.041532Z","shell.execute_reply.started":"2024-10-12T04:53:40.557518Z","shell.execute_reply":"2024-10-12T04:53:41.040405Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stdout","text":"(16, 255, 255, 3)\n(16,)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Model","metadata":{}},{"cell_type":"code","source":"img_height= 255\nimg_width = 255","metadata":{"execution":{"iopub.status.busy":"2024-10-12T04:53:47.318683Z","iopub.execute_input":"2024-10-12T04:53:47.319862Z","iopub.status.idle":"2024-10-12T04:53:47.324260Z","shell.execute_reply.started":"2024-10-12T04:53:47.319808Z","shell.execute_reply":"2024-10-12T04:53:47.323196Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"# Building the model\n\nmodel = tf.keras.Sequential([\n    layers.Conv2D(8, (3,3), padding=\"valid\", input_shape=(255,255,3), activation = 'relu'),\n    layers.MaxPooling2D(pool_size=(2,2)),\n    layers.BatchNormalization(),\n      \n    layers.Conv2D(16, (3,3), padding=\"valid\", activation = 'relu'),\n    layers.MaxPooling2D(pool_size=(2,2)),\n    layers.BatchNormalization(),\n    \n    layers.Conv2D(32, (4,4), padding=\"valid\", activation = 'relu'),\n    layers.MaxPooling2D(pool_size=(2,2)),\n    layers.BatchNormalization(),\n \n    layers.Flatten(),\n    layers.Dense(32, activation = 'relu'),\n    layers.Dropout(0.15),\n    layers.Dense(1, activation = 'sigmoid')\n])\n","metadata":{"execution":{"iopub.status.busy":"2024-10-12T06:37:53.287265Z","iopub.execute_input":"2024-10-12T06:37:53.287949Z","iopub.status.idle":"2024-10-12T06:37:53.367996Z","shell.execute_reply.started":"2024-10-12T06:37:53.287909Z","shell.execute_reply":"2024-10-12T06:37:53.367028Z"},"trusted":true},"execution_count":55,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n","output_type":"stream"}]},{"cell_type":"code","source":"model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate = 1e-5),\n              loss=tf.keras.losses.BinaryCrossentropy(),\n              metrics=['acc'])\n","metadata":{"execution":{"iopub.status.busy":"2024-10-12T06:37:56.903989Z","iopub.execute_input":"2024-10-12T06:37:56.904895Z","iopub.status.idle":"2024-10-12T06:37:56.914138Z","shell.execute_reply.started":"2024-10-12T06:37:56.904853Z","shell.execute_reply":"2024-10-12T06:37:56.913374Z"},"trusted":true},"execution_count":56,"outputs":[]},{"cell_type":"code","source":"model.summary()","metadata":{"execution":{"iopub.status.busy":"2024-10-12T06:37:47.432039Z","iopub.execute_input":"2024-10-12T06:37:47.432902Z","iopub.status.idle":"2024-10-12T06:37:47.461934Z","shell.execute_reply.started":"2024-10-12T06:37:47.432864Z","shell.execute_reply":"2024-10-12T06:37:47.461031Z"},"trusted":true},"execution_count":54,"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"sequential\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m253\u001b[0m, \u001b[38;5;34m253\u001b[0m, \u001b[38;5;34m8\u001b[0m)    │           \u001b[38;5;34m224\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d (\u001b[38;5;33mMaxPooling2D\u001b[0m)    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m126\u001b[0m, \u001b[38;5;34m126\u001b[0m, \u001b[38;5;34m8\u001b[0m)    │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m126\u001b[0m, \u001b[38;5;34m126\u001b[0m, \u001b[38;5;34m8\u001b[0m)    │            \u001b[38;5;34m32\u001b[0m │\n│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_1 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m124\u001b[0m, \u001b[38;5;34m124\u001b[0m, \u001b[38;5;34m16\u001b[0m)   │         \u001b[38;5;34m1,168\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_1 (\u001b[38;5;33mMaxPooling2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m62\u001b[0m, \u001b[38;5;34m62\u001b[0m, \u001b[38;5;34m16\u001b[0m)     │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization_1           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m62\u001b[0m, \u001b[38;5;34m62\u001b[0m, \u001b[38;5;34m16\u001b[0m)     │            \u001b[38;5;34m64\u001b[0m │\n│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_2 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m59\u001b[0m, \u001b[38;5;34m59\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │         \u001b[38;5;34m8,224\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_2 (\u001b[38;5;33mMaxPooling2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m29\u001b[0m, \u001b[38;5;34m29\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization_2           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m29\u001b[0m, \u001b[38;5;34m29\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │           \u001b[38;5;34m128\u001b[0m │\n│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten (\u001b[38;5;33mFlatten\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m26912\u001b[0m)          │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)             │       \u001b[38;5;34m861,216\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout (\u001b[38;5;33mDropout\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)             │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)              │            \u001b[38;5;34m33\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">253</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">253</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)    │           <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">126</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">126</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)    │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">126</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">126</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)    │            <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">124</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">124</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)   │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,168</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">62</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">62</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization_1           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">62</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">62</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)     │            <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">59</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">59</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │         <span style=\"color: #00af00; text-decoration-color: #00af00\">8,224</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">29</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">29</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization_2           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">29</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">29</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │           <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">26912</span>)          │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)             │       <span style=\"color: #00af00; text-decoration-color: #00af00\">861,216</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)             │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │            <span style=\"color: #00af00; text-decoration-color: #00af00\">33</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m871,089\u001b[0m (3.32 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">871,089</span> (3.32 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m870,977\u001b[0m (3.32 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">870,977</span> (3.32 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m112\u001b[0m (448.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">112</span> (448.00 B)\n</pre>\n"},"metadata":{}}]},{"cell_type":"code","source":"#EfficientB0\nefficientnet = EfficientNetB0(include_top=False, weights='imagenet', input_shape=(255,255,3))","metadata":{"execution":{"iopub.status.busy":"2024-10-12T04:54:00.939013Z","iopub.execute_input":"2024-10-12T04:54:00.940174Z","iopub.status.idle":"2024-10-12T04:54:02.454273Z","shell.execute_reply.started":"2024-10-12T04:54:00.940102Z","shell.execute_reply":"2024-10-12T04:54:02.453450Z"},"trusted":true},"execution_count":23,"outputs":[{"name":"stdout","text":"Downloading data from https://storage.googleapis.com/keras-applications/efficientnetb0_notop.h5\n\u001b[1m16705208/16705208\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n","output_type":"stream"}]},{"cell_type":"code","source":" def build_model():\n    model_1 = Sequential()\n    model_1.add(efficientnet)\n    model_1.add(layers.GlobalAveragePooling2D())\n    model_1.add(layers.Dense(256))\n    model_1.add(layers.Dense(256))\n    model_1.add(layers.Dense(1))\n    \n    model_1.compile(optimizer=tf.keras.optimizers.Adam(learning_rate = 1e-5),\n              loss=tf.keras.losses.BinaryCrossentropy(),\n              metrics=['acc'])\n    \n    return model_1","metadata":{"execution":{"iopub.status.busy":"2024-10-12T06:37:06.512093Z","iopub.execute_input":"2024-10-12T06:37:06.513182Z","iopub.status.idle":"2024-10-12T06:37:06.519071Z","shell.execute_reply.started":"2024-10-12T06:37:06.513113Z","shell.execute_reply":"2024-10-12T06:37:06.518189Z"},"trusted":true},"execution_count":48,"outputs":[]},{"cell_type":"code","source":"model_eff = build_model()","metadata":{"execution":{"iopub.status.busy":"2024-10-12T06:37:24.382814Z","iopub.execute_input":"2024-10-12T06:37:24.383232Z","iopub.status.idle":"2024-10-12T06:37:24.398487Z","shell.execute_reply.started":"2024-10-12T06:37:24.383191Z","shell.execute_reply":"2024-10-12T06:37:24.397500Z"},"trusted":true},"execution_count":50,"outputs":[]},{"cell_type":"code","source":"#Early stopping \nEarly_stopping = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=10)","metadata":{"execution":{"iopub.status.busy":"2024-10-12T06:37:27.467602Z","iopub.execute_input":"2024-10-12T06:37:27.468275Z","iopub.status.idle":"2024-10-12T06:37:27.472376Z","shell.execute_reply.started":"2024-10-12T06:37:27.468227Z","shell.execute_reply":"2024-10-12T06:37:27.471459Z"},"trusted":true},"execution_count":51,"outputs":[]},{"cell_type":"code","source":"#Learning Rate scheduler\ndef scheduler(epoch, lr):\n  if epoch < 10:\n    return lr\n  else:\n    return lr * tf.math.exp(-0.1)","metadata":{"execution":{"iopub.status.busy":"2024-10-09T07:21:14.129094Z","iopub.execute_input":"2024-10-09T07:21:14.129948Z","iopub.status.idle":"2024-10-09T07:21:14.134932Z","shell.execute_reply.started":"2024-10-09T07:21:14.129905Z","shell.execute_reply":"2024-10-09T07:21:14.133844Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Learning rate\nLearningRate_sch = tf.keras.callbacks.LearningRateScheduler(scheduler)","metadata":{"execution":{"iopub.status.busy":"2024-10-09T07:21:17.448588Z","iopub.execute_input":"2024-10-09T07:21:17.449620Z","iopub.status.idle":"2024-10-09T07:21:17.453634Z","shell.execute_reply.started":"2024-10-09T07:21:17.449559Z","shell.execute_reply":"2024-10-09T07:21:17.452653Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"epochs=10\nhistory = model.fit(\n  train_generator,\n  validation_data=val_generator,\n  epochs=epochs,callbacks = [Early_stopping]\n)","metadata":{"execution":{"iopub.status.busy":"2024-10-12T06:37:31.615227Z","iopub.execute_input":"2024-10-12T06:37:31.615617Z","iopub.status.idle":"2024-10-12T06:37:31.725056Z","shell.execute_reply.started":"2024-10-12T06:37:31.615579Z","shell.execute_reply":"2024-10-12T06:37:31.723870Z"},"trusted":true},"execution_count":52,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Cell \u001b[0;32mIn[52], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m epochs\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m10\u001b[39m\n\u001b[0;32m----> 2\u001b[0m history \u001b[38;5;241m=\u001b[39m \u001b[43mmodel\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m      3\u001b[0m \u001b[43m  \u001b[49m\u001b[43mtrain_generator\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m      4\u001b[0m \u001b[43m  \u001b[49m\u001b[43mvalidation_data\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mval_generator\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m      5\u001b[0m \u001b[43m  \u001b[49m\u001b[43mepochs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mepochs\u001b[49m\u001b[43m,\u001b[49m\u001b[43mcallbacks\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m \u001b[49m\u001b[43m[\u001b[49m\u001b[43mEarly_stopping\u001b[49m\u001b[43m]\u001b[49m\n\u001b[1;32m      6\u001b[0m \u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/keras/src/utils/traceback_utils.py:122\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    119\u001b[0m     filtered_tb \u001b[38;5;241m=\u001b[39m _process_traceback_frames(e\u001b[38;5;241m.\u001b[39m__traceback__)\n\u001b[1;32m    120\u001b[0m     \u001b[38;5;66;03m# To get the full stack trace, call:\u001b[39;00m\n\u001b[1;32m    121\u001b[0m     \u001b[38;5;66;03m# `keras.config.disable_traceback_filtering()`\u001b[39;00m\n\u001b[0;32m--> 122\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m e\u001b[38;5;241m.\u001b[39mwith_traceback(filtered_tb) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m    123\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[1;32m    124\u001b[0m     \u001b[38;5;28;01mdel\u001b[39;00m filtered_tb\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/keras/src/trainers/trainer.py:961\u001b[0m, in \u001b[0;36mTrainer._assert_compile_called\u001b[0;34m(self, method_name)\u001b[0m\n\u001b[1;32m    959\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    960\u001b[0m     msg \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcalling `\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mmethod_name\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m()`.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m--> 961\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(msg)\n","\u001b[0;31mValueError\u001b[0m: You must call `compile()` before using the model."],"ename":"ValueError","evalue":"You must call `compile()` before using the model.","output_type":"error"}]},{"cell_type":"markdown","source":"# Model Efficent Training","metadata":{}},{"cell_type":"code","source":"epochs=10\nhistory_1 = model_eff.fit(\n  train_generator,\n  validation_data=val_generator,\n  epochs=epochs,callbacks = [Early_stopping]\n)","metadata":{"execution":{"iopub.status.busy":"2024-10-12T06:38:09.400713Z","iopub.execute_input":"2024-10-12T06:38:09.401346Z","iopub.status.idle":"2024-10-12T06:58:18.712390Z","shell.execute_reply.started":"2024-10-12T06:38:09.401306Z","shell.execute_reply":"2024-10-12T06:58:18.710167Z"},"trusted":true},"execution_count":57,"outputs":[{"name":"stdout","text":"Epoch 1/10\n\u001b[1m1757/1757\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m594s\u001b[0m 291ms/step - acc: 0.5554 - loss: 1.9485 - val_acc: 0.5966 - val_loss: 1.2512\nEpoch 2/10\n\u001b[1m1757/1757\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m281s\u001b[0m 159ms/step - acc: 0.6183 - loss: 1.1661 - val_acc: 0.6608 - val_loss: 1.0095\nEpoch 3/10\n\u001b[1m1757/1757\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m266s\u001b[0m 151ms/step - acc: 0.6460 - loss: 0.9857 - val_acc: 0.6423 - val_loss: 1.1310\nEpoch 4/10\n\u001b[1m  91/1757\u001b[0m \u001b[32m━\u001b[0m\u001b[37m━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m3:09\u001b[0m 114ms/step - acc: 0.6397 - loss: 1.0266","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","Cell \u001b[0;32mIn[57], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m epochs\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m10\u001b[39m\n\u001b[0;32m----> 2\u001b[0m history_1 \u001b[38;5;241m=\u001b[39m \u001b[43mmodel_eff\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m      3\u001b[0m \u001b[43m  \u001b[49m\u001b[43mtrain_generator\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m      4\u001b[0m \u001b[43m  \u001b[49m\u001b[43mvalidation_data\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mval_generator\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m      5\u001b[0m \u001b[43m  \u001b[49m\u001b[43mepochs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mepochs\u001b[49m\u001b[43m,\u001b[49m\u001b[43mcallbacks\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m \u001b[49m\u001b[43m[\u001b[49m\u001b[43mEarly_stopping\u001b[49m\u001b[43m]\u001b[49m\n\u001b[1;32m      6\u001b[0m \u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/keras/src/utils/traceback_utils.py:117\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    115\u001b[0m filtered_tb \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m    116\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 117\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfn\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    118\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m    119\u001b[0m     filtered_tb \u001b[38;5;241m=\u001b[39m _process_traceback_frames(e\u001b[38;5;241m.\u001b[39m__traceback__)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/keras/src/backend/tensorflow/trainer.py:314\u001b[0m, in \u001b[0;36mTensorFlowTrainer.fit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq)\u001b[0m\n\u001b[1;32m    312\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m step, iterator \u001b[38;5;129;01min\u001b[39;00m epoch_iterator\u001b[38;5;241m.\u001b[39menumerate_epoch():\n\u001b[1;32m    313\u001b[0m     callbacks\u001b[38;5;241m.\u001b[39mon_train_batch_begin(step)\n\u001b[0;32m--> 314\u001b[0m     logs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtrain_function\u001b[49m\u001b[43m(\u001b[49m\u001b[43miterator\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    315\u001b[0m     logs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_pythonify_logs(logs)\n\u001b[1;32m    316\u001b[0m     callbacks\u001b[38;5;241m.\u001b[39mon_train_batch_end(step, logs)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py:150\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m filtered_tb \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m    149\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 150\u001b[0m   \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfn\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    151\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m    152\u001b[0m   filtered_tb \u001b[38;5;241m=\u001b[39m _process_traceback_frames(e\u001b[38;5;241m.\u001b[39m__traceback__)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py:833\u001b[0m, in \u001b[0;36mFunction.__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    830\u001b[0m compiler \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mxla\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_jit_compile \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnonXla\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    832\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m OptionalXlaContext(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_jit_compile):\n\u001b[0;32m--> 833\u001b[0m   result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_call\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwds\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    835\u001b[0m new_tracing_count \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mexperimental_get_tracing_count()\n\u001b[1;32m    836\u001b[0m without_tracing \u001b[38;5;241m=\u001b[39m (tracing_count \u001b[38;5;241m==\u001b[39m new_tracing_count)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py:878\u001b[0m, in \u001b[0;36mFunction._call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    875\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock\u001b[38;5;241m.\u001b[39mrelease()\n\u001b[1;32m    876\u001b[0m \u001b[38;5;66;03m# In this case we have not created variables on the first call. So we can\u001b[39;00m\n\u001b[1;32m    877\u001b[0m \u001b[38;5;66;03m# run the first trace but we should fail if variables are created.\u001b[39;00m\n\u001b[0;32m--> 878\u001b[0m results \u001b[38;5;241m=\u001b[39m \u001b[43mtracing_compilation\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcall_function\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    879\u001b[0m \u001b[43m    \u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mkwds\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_variable_creation_config\u001b[49m\n\u001b[1;32m    880\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    881\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_created_variables:\n\u001b[1;32m    882\u001b[0m   \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCreating variables on a non-first call to a function\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    883\u001b[0m                    \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m decorated with tf.function.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/eager/polymorphic_function/tracing_compilation.py:139\u001b[0m, in \u001b[0;36mcall_function\u001b[0;34m(args, kwargs, tracing_options)\u001b[0m\n\u001b[1;32m    137\u001b[0m bound_args \u001b[38;5;241m=\u001b[39m function\u001b[38;5;241m.\u001b[39mfunction_type\u001b[38;5;241m.\u001b[39mbind(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m    138\u001b[0m flat_inputs \u001b[38;5;241m=\u001b[39m function\u001b[38;5;241m.\u001b[39mfunction_type\u001b[38;5;241m.\u001b[39munpack_inputs(bound_args)\n\u001b[0;32m--> 139\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfunction\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_call_flat\u001b[49m\u001b[43m(\u001b[49m\u001b[43m  \u001b[49m\u001b[38;5;66;43;03m# pylint: disable=protected-access\u001b[39;49;00m\n\u001b[1;32m    140\u001b[0m \u001b[43m    \u001b[49m\u001b[43mflat_inputs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcaptured_inputs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfunction\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcaptured_inputs\u001b[49m\n\u001b[1;32m    141\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/eager/polymorphic_function/concrete_function.py:1322\u001b[0m, in \u001b[0;36mConcreteFunction._call_flat\u001b[0;34m(self, tensor_inputs, captured_inputs)\u001b[0m\n\u001b[1;32m   1318\u001b[0m possible_gradient_type \u001b[38;5;241m=\u001b[39m gradients_util\u001b[38;5;241m.\u001b[39mPossibleTapeGradientTypes(args)\n\u001b[1;32m   1319\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m (possible_gradient_type \u001b[38;5;241m==\u001b[39m gradients_util\u001b[38;5;241m.\u001b[39mPOSSIBLE_GRADIENT_TYPES_NONE\n\u001b[1;32m   1320\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m executing_eagerly):\n\u001b[1;32m   1321\u001b[0m   \u001b[38;5;66;03m# No tape is watching; skip to running the function.\u001b[39;00m\n\u001b[0;32m-> 1322\u001b[0m   \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_inference_function\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcall_preflattened\u001b[49m\u001b[43m(\u001b[49m\u001b[43margs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1323\u001b[0m forward_backward \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_select_forward_and_backward_functions(\n\u001b[1;32m   1324\u001b[0m     args,\n\u001b[1;32m   1325\u001b[0m     possible_gradient_type,\n\u001b[1;32m   1326\u001b[0m     executing_eagerly)\n\u001b[1;32m   1327\u001b[0m forward_function, args_with_tangents \u001b[38;5;241m=\u001b[39m forward_backward\u001b[38;5;241m.\u001b[39mforward()\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/eager/polymorphic_function/atomic_function.py:216\u001b[0m, in \u001b[0;36mAtomicFunction.call_preflattened\u001b[0;34m(self, args)\u001b[0m\n\u001b[1;32m    214\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mcall_preflattened\u001b[39m(\u001b[38;5;28mself\u001b[39m, args: Sequence[core\u001b[38;5;241m.\u001b[39mTensor]) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Any:\n\u001b[1;32m    215\u001b[0m \u001b[38;5;250m  \u001b[39m\u001b[38;5;124;03m\"\"\"Calls with flattened tensor inputs and returns the structured output.\"\"\"\u001b[39;00m\n\u001b[0;32m--> 216\u001b[0m   flat_outputs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcall_flat\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    217\u001b[0m   \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfunction_type\u001b[38;5;241m.\u001b[39mpack_output(flat_outputs)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/eager/polymorphic_function/atomic_function.py:251\u001b[0m, in \u001b[0;36mAtomicFunction.call_flat\u001b[0;34m(self, *args)\u001b[0m\n\u001b[1;32m    249\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m record\u001b[38;5;241m.\u001b[39mstop_recording():\n\u001b[1;32m    250\u001b[0m   \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_bound_context\u001b[38;5;241m.\u001b[39mexecuting_eagerly():\n\u001b[0;32m--> 251\u001b[0m     outputs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_bound_context\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcall_function\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    252\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    253\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;28;43mlist\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43margs\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    254\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;28;43mlen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfunction_type\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mflat_outputs\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    255\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    256\u001b[0m   \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    257\u001b[0m     outputs \u001b[38;5;241m=\u001b[39m make_call_op_in_graph(\n\u001b[1;32m    258\u001b[0m         \u001b[38;5;28mself\u001b[39m,\n\u001b[1;32m    259\u001b[0m         \u001b[38;5;28mlist\u001b[39m(args),\n\u001b[1;32m    260\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_bound_context\u001b[38;5;241m.\u001b[39mfunction_call_options\u001b[38;5;241m.\u001b[39mas_attrs(),\n\u001b[1;32m    261\u001b[0m     )\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/eager/context.py:1500\u001b[0m, in \u001b[0;36mContext.call_function\u001b[0;34m(self, name, tensor_inputs, num_outputs)\u001b[0m\n\u001b[1;32m   1498\u001b[0m cancellation_context \u001b[38;5;241m=\u001b[39m cancellation\u001b[38;5;241m.\u001b[39mcontext()\n\u001b[1;32m   1499\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m cancellation_context \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m-> 1500\u001b[0m   outputs \u001b[38;5;241m=\u001b[39m \u001b[43mexecute\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mexecute\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1501\u001b[0m \u001b[43m      \u001b[49m\u001b[43mname\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdecode\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mutf-8\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1502\u001b[0m \u001b[43m      \u001b[49m\u001b[43mnum_outputs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mnum_outputs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1503\u001b[0m \u001b[43m      \u001b[49m\u001b[43minputs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtensor_inputs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1504\u001b[0m \u001b[43m      \u001b[49m\u001b[43mattrs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mattrs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1505\u001b[0m \u001b[43m      \u001b[49m\u001b[43mctx\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1506\u001b[0m \u001b[43m  \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1507\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m   1508\u001b[0m   outputs \u001b[38;5;241m=\u001b[39m execute\u001b[38;5;241m.\u001b[39mexecute_with_cancellation(\n\u001b[1;32m   1509\u001b[0m       name\u001b[38;5;241m.\u001b[39mdecode(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mutf-8\u001b[39m\u001b[38;5;124m\"\u001b[39m),\n\u001b[1;32m   1510\u001b[0m       num_outputs\u001b[38;5;241m=\u001b[39mnum_outputs,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1514\u001b[0m       cancellation_manager\u001b[38;5;241m=\u001b[39mcancellation_context,\n\u001b[1;32m   1515\u001b[0m   )\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/eager/execute.py:53\u001b[0m, in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     51\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m     52\u001b[0m   ctx\u001b[38;5;241m.\u001b[39mensure_initialized()\n\u001b[0;32m---> 53\u001b[0m   tensors \u001b[38;5;241m=\u001b[39m \u001b[43mpywrap_tfe\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mTFE_Py_Execute\u001b[49m\u001b[43m(\u001b[49m\u001b[43mctx\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_handle\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdevice_name\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mop_name\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m     54\u001b[0m \u001b[43m                                      \u001b[49m\u001b[43minputs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mattrs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnum_outputs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     55\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m core\u001b[38;5;241m.\u001b[39m_NotOkStatusException \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m     56\u001b[0m   \u001b[38;5;28;01mif\u001b[39;00m name \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "],"ename":"KeyboardInterrupt","evalue":"","output_type":"error"}]},{"cell_type":"markdown","source":"# ResNet50","metadata":{}},{"cell_type":"code","source":"resnet50 = tf.keras.applications.ResNet50(include_top=False, weights='imagenet', input_shape=(255,255,3))","metadata":{"execution":{"iopub.status.busy":"2024-10-12T05:09:38.341232Z","iopub.execute_input":"2024-10-12T05:09:38.341888Z","iopub.status.idle":"2024-10-12T05:09:40.600836Z","shell.execute_reply.started":"2024-10-12T05:09:38.341850Z","shell.execute_reply":"2024-10-12T05:09:40.600041Z"},"trusted":true},"execution_count":26,"outputs":[{"name":"stdout","text":"Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/resnet/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5\n\u001b[1m94765736/94765736\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n","output_type":"stream"}]},{"cell_type":"code","source":"def build_model():\n    model_2 = Sequential()\n    model_2.add(resnet50)\n    model_2.add(layers.GlobalAveragePooling2D())\n    model_2.add(layers.Dense(256))\n    model_2.add(layers.Dense(256))\n    model_2.add(layers.Dense(1))\n    \n    model_2.compile(optimizer=tf.keras.optimizers.Adam(learning_rate = 1e-5),\n              loss=tf.keras.losses.BinaryCrossentropy(),\n              metrics=['acc'])\n    \n    return model_2","metadata":{"execution":{"iopub.status.busy":"2024-10-12T05:11:14.578572Z","iopub.execute_input":"2024-10-12T05:11:14.579252Z","iopub.status.idle":"2024-10-12T05:11:14.585490Z","shell.execute_reply.started":"2024-10-12T05:11:14.579205Z","shell.execute_reply":"2024-10-12T05:11:14.584555Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"code","source":"model_resnet50 = build_model()","metadata":{"execution":{"iopub.status.busy":"2024-10-12T05:11:44.277358Z","iopub.execute_input":"2024-10-12T05:11:44.277711Z","iopub.status.idle":"2024-10-12T05:11:44.296067Z","shell.execute_reply.started":"2024-10-12T05:11:44.277678Z","shell.execute_reply":"2024-10-12T05:11:44.295172Z"},"trusted":true},"execution_count":28,"outputs":[]},{"cell_type":"markdown","source":"# ResNet50 Training","metadata":{}},{"cell_type":"code","source":"epochs=10\nhistory_2 = model_resnet50.fit(\n  train_generator,\n  validation_data=val_generator,\n  epochs=epochs,callbacks = [Early_stopping]\n)","metadata":{"execution":{"iopub.status.busy":"2024-10-12T05:13:39.129914Z","iopub.execute_input":"2024-10-12T05:13:39.130604Z","iopub.status.idle":"2024-10-12T06:03:56.497463Z","shell.execute_reply.started":"2024-10-12T05:13:39.130567Z","shell.execute_reply":"2024-10-12T06:03:56.496612Z"},"trusted":true},"execution_count":31,"outputs":[{"name":"stdout","text":"Epoch 1/10\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n  self._warn_if_super_not_called()\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1728710053.114727     118 service.cc:145] XLA service 0x7a8b80004d70 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\nI0000 00:00:1728710053.114784     118 service.cc:153]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m   1/1757\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m27:41:46\u001b[0m 57s/step - acc: 0.1250 - loss: 14.1033","output_type":"stream"},{"name":"stderr","text":"I0000 00:00:1728710076.098625     118 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m 131/1757\u001b[0m \u001b[32m━\u001b[0m\u001b[37m━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m10:36\u001b[0m 391ms/step - acc: 0.5479 - loss: 5.4132","output_type":"stream"},{"name":"stderr","text":"WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1728710126.956528     120 asm_compiler.cc:369] ptxas warning : Registers are spilled to local memory in function 'loop_add_subtract_fusion_31', 16 bytes spill stores, 16 bytes spill loads\n\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m1757/1757\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m658s\u001b[0m 342ms/step - acc: 0.6538 - loss: 4.1907 - val_acc: 0.7310 - val_loss: 3.2376\nEpoch 2/10\n\u001b[1m1757/1757\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m263s\u001b[0m 149ms/step - acc: 0.7372 - loss: 3.6731 - val_acc: 0.7368 - val_loss: 4.1698\nEpoch 3/10\n\u001b[1m1757/1757\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m273s\u001b[0m 155ms/step - acc: 0.7369 - loss: 4.1945 - val_acc: 0.7357 - val_loss: 4.2116\nEpoch 4/10\n\u001b[1m1757/1757\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m265s\u001b[0m 151ms/step - acc: 0.7371 - loss: 4.1907 - val_acc: 0.7357 - val_loss: 4.2116\nEpoch 5/10\n\u001b[1m1757/1757\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m263s\u001b[0m 149ms/step - acc: 0.7346 - loss: 4.2093 - val_acc: 0.6940 - val_loss: 4.3359\nEpoch 6/10\n\u001b[1m1757/1757\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m262s\u001b[0m 149ms/step - acc: 0.7194 - loss: 4.0909 - val_acc: 0.7383 - val_loss: 4.1612\nEpoch 7/10\n\u001b[1m1757/1757\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m256s\u001b[0m 145ms/step - acc: 0.7153 - loss: 4.3768 - val_acc: 0.7215 - val_loss: 4.2296\nEpoch 8/10\n\u001b[1m1757/1757\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m256s\u001b[0m 145ms/step - acc: 0.7268 - loss: 4.1661 - val_acc: 0.7454 - val_loss: 3.8818\nEpoch 9/10\n\u001b[1m1757/1757\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m263s\u001b[0m 149ms/step - acc: 0.7214 - loss: 4.1951 - val_acc: 0.7457 - val_loss: 4.0103\nEpoch 10/10\n\u001b[1m1757/1757\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m257s\u001b[0m 146ms/step - acc: 0.7395 - loss: 4.1001 - val_acc: 0.7461 - val_loss: 3.9457\n","output_type":"stream"}]},{"cell_type":"code","source":"# Save the trained model\nmodel.save('Binaray_classification.h5')#save model sequence","metadata":{"execution":{"iopub.status.busy":"2024-10-11T14:40:51.313464Z","iopub.execute_input":"2024-10-11T14:40:51.313888Z","iopub.status.idle":"2024-10-11T14:40:51.386913Z","shell.execute_reply.started":"2024-10-11T14:40:51.313850Z","shell.execute_reply":"2024-10-11T14:40:51.386164Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model_eff.save(\"efficent_classification.h5\") #efficientB0","metadata":{"execution":{"iopub.status.busy":"2024-10-11T16:57:54.577323Z","iopub.execute_input":"2024-10-11T16:57:54.577742Z","iopub.status.idle":"2024-10-11T16:57:55.242778Z","shell.execute_reply.started":"2024-10-11T16:57:54.577692Z","shell.execute_reply":"2024-10-11T16:57:55.241917Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model_resnet50.save(\"resnet50_classification.h5\")","metadata":{"execution":{"iopub.status.busy":"2024-10-12T06:07:32.833942Z","iopub.execute_input":"2024-10-12T06:07:32.834612Z","iopub.status.idle":"2024-10-12T06:07:33.731440Z","shell.execute_reply.started":"2024-10-12T06:07:32.834568Z","shell.execute_reply":"2024-10-12T06:07:33.730266Z"},"trusted":true},"execution_count":32,"outputs":[]},{"cell_type":"markdown","source":"# Squencce Model","metadata":{}},{"cell_type":"code","source":"#let see the training  validation accuracy  \nepochs = range(1, len(history.history[\"acc\"]) + 1)\nloss = history.history[\"acc\"]\nval_loss = history.history[\"val_acc\"]\nplt.figure()\nplt.plot(epochs, loss, \"r\", label=\"Training acc\")\nplt.plot(epochs, val_loss, \"b\", label=\"Validation accuracy\")\nplt.title(\"Training and validation accuaracy\")\nplt.legend()","metadata":{"execution":{"iopub.status.busy":"2024-10-11T14:41:57.843714Z","iopub.execute_input":"2024-10-11T14:41:57.844092Z","iopub.status.idle":"2024-10-11T14:41:58.086109Z","shell.execute_reply.started":"2024-10-11T14:41:57.844057Z","shell.execute_reply":"2024-10-11T14:41:58.085190Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#let see the training  validation loss\nepochs = range(1, len(history.history[\"loss\"]) + 1)\nloss = history.history[\"loss\"]\nval_loss = history.history[\"val_loss\"]\nplt.figure()\nplt.plot(epochs, loss, \"r\", label=\"Training loss\")\nplt.plot(epochs, val_loss, \"b\", label=\"Validation loss\")\nplt.title(\"Training and validation loss\")\nplt.legend()","metadata":{"execution":{"iopub.status.busy":"2024-10-11T15:08:25.210917Z","iopub.execute_input":"2024-10-11T15:08:25.211642Z","iopub.status.idle":"2024-10-11T15:08:25.470224Z","shell.execute_reply.started":"2024-10-11T15:08:25.211601Z","shell.execute_reply":"2024-10-11T15:08:25.469324Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"EfficientB0 Graphs","metadata":{}},{"cell_type":"code","source":"#let see the training  validation accuracy  \nepochs = range(1, len(history_1.history[\"acc\"]) + 1)\nloss = history_1.history[\"acc\"]\nval_loss = history_1.history[\"val_acc\"]\nplt.figure()\nplt.plot(epochs, loss, \"r\", label=\"Training acc\")\nplt.plot(epochs, val_loss, \"b\", label=\"Validation accuracy\")\nplt.title(\"Training and validation accuaracy\")\nplt.legend()","metadata":{"execution":{"iopub.status.busy":"2024-10-11T16:59:23.247603Z","iopub.execute_input":"2024-10-11T16:59:23.248483Z","iopub.status.idle":"2024-10-11T16:59:23.582177Z","shell.execute_reply.started":"2024-10-11T16:59:23.248440Z","shell.execute_reply":"2024-10-11T16:59:23.581196Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#let see the training  validation loss\nepochs = range(1, len(history_1.history[\"loss\"]) + 1)\nloss = history_1.history[\"loss\"]\nval_loss = history_1.history[\"val_loss\"]\nplt.figure()\nplt.plot(epochs, loss, \"r\", label=\"Training loss\")\nplt.plot(epochs, val_loss, \"b\", label=\"Validation loss\")\nplt.title(\"Training and validation loss\")\nplt.legend()","metadata":{"execution":{"iopub.status.busy":"2024-10-11T16:59:43.833974Z","iopub.execute_input":"2024-10-11T16:59:43.834628Z","iopub.status.idle":"2024-10-11T16:59:44.154466Z","shell.execute_reply.started":"2024-10-11T16:59:43.834588Z","shell.execute_reply":"2024-10-11T16:59:44.153556Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# ResNet50 Graphs","metadata":{}},{"cell_type":"code","source":"#let see the training  validation accuracy  \nepochs = range(1, len(history_2.history[\"acc\"]) + 1)\nloss = history_2.history[\"acc\"]\nval_loss = history_2.history[\"val_acc\"]\nplt.figure()\nplt.plot(epochs, loss, \"r\", label=\"Training acc\")\nplt.plot(epochs, val_loss, \"b\", label=\"Validation accuracy\")\nplt.title(\"Training and validation accuaracy\")\nplt.legend()","metadata":{"execution":{"iopub.status.busy":"2024-10-12T06:08:17.413390Z","iopub.execute_input":"2024-10-12T06:08:17.414056Z","iopub.status.idle":"2024-10-12T06:08:17.752938Z","shell.execute_reply.started":"2024-10-12T06:08:17.414017Z","shell.execute_reply":"2024-10-12T06:08:17.752050Z"},"trusted":true},"execution_count":33,"outputs":[{"execution_count":33,"output_type":"execute_result","data":{"text/plain":"<matplotlib.legend.Legend at 0x7a8754e99510>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"#let see the training  validation loss\nepochs = range(1, len(history_2.history[\"loss\"]) + 1)\nloss = history_2.history[\"loss\"]\nval_loss = history_2.history[\"val_loss\"]\nplt.figure()\nplt.plot(epochs, loss, \"r\", label=\"Training loss\")\nplt.plot(epochs, val_loss, \"b\", label=\"Validation loss\")\nplt.title(\"Training and validation loss\")\nplt.legend()","metadata":{"execution":{"iopub.status.busy":"2024-10-12T06:08:43.512020Z","iopub.execute_input":"2024-10-12T06:08:43.512428Z","iopub.status.idle":"2024-10-12T06:08:43.766320Z","shell.execute_reply.started":"2024-10-12T06:08:43.512386Z","shell.execute_reply":"2024-10-12T06:08:43.765402Z"},"trusted":true},"execution_count":34,"outputs":[{"execution_count":34,"output_type":"execute_result","data":{"text/plain":"<matplotlib.legend.Legend at 0x7a87643f7850>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"test_df =pd.read_csv('/kaggle/input/resized-2015-2019-blindness-detection-images/labels/testLabels15.csv')","metadata":{"execution":{"iopub.status.busy":"2024-10-12T06:08:51.810447Z","iopub.execute_input":"2024-10-12T06:08:51.810849Z","iopub.status.idle":"2024-10-12T06:08:51.878093Z","shell.execute_reply.started":"2024-10-12T06:08:51.810809Z","shell.execute_reply":"2024-10-12T06:08:51.877063Z"},"trusted":true},"execution_count":35,"outputs":[]},{"cell_type":"code","source":"test_df","metadata":{"execution":{"iopub.status.busy":"2024-10-12T06:08:54.406754Z","iopub.execute_input":"2024-10-12T06:08:54.407166Z","iopub.status.idle":"2024-10-12T06:08:54.420507Z","shell.execute_reply.started":"2024-10-12T06:08:54.407107Z","shell.execute_reply":"2024-10-12T06:08:54.419512Z"},"trusted":true},"execution_count":36,"outputs":[{"execution_count":36,"output_type":"execute_result","data":{"text/plain":"             image  level    Usage\n0           1_left      0  Private\n1          1_right      0  Private\n2           2_left      0   Public\n3          2_right      0   Public\n4           3_left      2  Private\n...            ...    ...      ...\n53571  44346_right      0  Private\n53572   44350_left      0  Private\n53573  44350_right      0  Private\n53574   44351_left      0   Public\n53575  44351_right      0   Public\n\n[53576 rows x 3 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>image</th>\n      <th>level</th>\n      <th>Usage</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1_left</td>\n      <td>0</td>\n      <td>Private</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1_right</td>\n      <td>0</td>\n      <td>Private</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2_left</td>\n      <td>0</td>\n      <td>Public</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2_right</td>\n      <td>0</td>\n      <td>Public</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3_left</td>\n      <td>2</td>\n      <td>Private</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>53571</th>\n      <td>44346_right</td>\n      <td>0</td>\n      <td>Private</td>\n    </tr>\n    <tr>\n      <th>53572</th>\n      <td>44350_left</td>\n      <td>0</td>\n      <td>Private</td>\n    </tr>\n    <tr>\n      <th>53573</th>\n      <td>44350_right</td>\n      <td>0</td>\n      <td>Private</td>\n    </tr>\n    <tr>\n      <th>53574</th>\n      <td>44351_left</td>\n      <td>0</td>\n      <td>Public</td>\n    </tr>\n    <tr>\n      <th>53575</th>\n      <td>44351_right</td>\n      <td>0</td>\n      <td>Public</td>\n    </tr>\n  </tbody>\n</table>\n<p>53576 rows × 3 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test_data = drop_columns(test_df)","metadata":{"execution":{"iopub.status.busy":"2024-10-12T06:08:57.839459Z","iopub.execute_input":"2024-10-12T06:08:57.840328Z","iopub.status.idle":"2024-10-12T06:08:57.854861Z","shell.execute_reply.started":"2024-10-12T06:08:57.840266Z","shell.execute_reply":"2024-10-12T06:08:57.853880Z"},"trusted":true},"execution_count":37,"outputs":[]},{"cell_type":"code","source":"test_data","metadata":{"execution":{"iopub.status.busy":"2024-10-12T06:09:00.365017Z","iopub.execute_input":"2024-10-12T06:09:00.365761Z","iopub.status.idle":"2024-10-12T06:09:00.376764Z","shell.execute_reply.started":"2024-10-12T06:09:00.365720Z","shell.execute_reply":"2024-10-12T06:09:00.375778Z"},"trusted":true},"execution_count":38,"outputs":[{"execution_count":38,"output_type":"execute_result","data":{"text/plain":"                 image  level    Usage\n0           1_left.jpg      0  Private\n1          1_right.jpg      0  Private\n2           2_left.jpg      0   Public\n3          2_right.jpg      0   Public\n4           3_left.jpg      2  Private\n...                ...    ...      ...\n53571  44346_right.jpg      0  Private\n53572   44350_left.jpg      0  Private\n53573  44350_right.jpg      0  Private\n53574   44351_left.jpg      0   Public\n53575  44351_right.jpg      0   Public\n\n[53576 rows x 3 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>image</th>\n      <th>level</th>\n      <th>Usage</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1_left.jpg</td>\n      <td>0</td>\n      <td>Private</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1_right.jpg</td>\n      <td>0</td>\n      <td>Private</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2_left.jpg</td>\n      <td>0</td>\n      <td>Public</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2_right.jpg</td>\n      <td>0</td>\n      <td>Public</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3_left.jpg</td>\n      <td>2</td>\n      <td>Private</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>53571</th>\n      <td>44346_right.jpg</td>\n      <td>0</td>\n      <td>Private</td>\n    </tr>\n    <tr>\n      <th>53572</th>\n      <td>44350_left.jpg</td>\n      <td>0</td>\n      <td>Private</td>\n    </tr>\n    <tr>\n      <th>53573</th>\n      <td>44350_right.jpg</td>\n      <td>0</td>\n      <td>Private</td>\n    </tr>\n    <tr>\n      <th>53574</th>\n      <td>44351_left.jpg</td>\n      <td>0</td>\n      <td>Public</td>\n    </tr>\n    <tr>\n      <th>53575</th>\n      <td>44351_right.jpg</td>\n      <td>0</td>\n      <td>Public</td>\n    </tr>\n  </tbody>\n</table>\n<p>53576 rows × 3 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"#make into Binary\ndiagnosis_dict_binary = {\n    0: 'No_DR',\n    1: 'DR',\n    2: 'DR',\n    3: 'DR',\n    4: 'DR'\n}\n\ndiagnosis_dict = {\n    0: 'No_DR',\n    1: 'Mild',\n    2: 'Moderate',\n    3: 'Severe',\n    4: 'Proliferate_DR',\n}\n\n\ntest_data['binary_type'] =  test_data['level'].map(diagnosis_dict_binary.get)\ntest_data['type'] = test_data['level'].map(diagnosis_dict.get)\ntest_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-10-12T06:09:03.883039Z","iopub.execute_input":"2024-10-12T06:09:03.883466Z","iopub.status.idle":"2024-10-12T06:09:03.923485Z","shell.execute_reply.started":"2024-10-12T06:09:03.883427Z","shell.execute_reply":"2024-10-12T06:09:03.922372Z"},"trusted":true},"execution_count":39,"outputs":[{"execution_count":39,"output_type":"execute_result","data":{"text/plain":"         image  level    Usage binary_type      type\n0   1_left.jpg      0  Private       No_DR     No_DR\n1  1_right.jpg      0  Private       No_DR     No_DR\n2   2_left.jpg      0   Public       No_DR     No_DR\n3  2_right.jpg      0   Public       No_DR     No_DR\n4   3_left.jpg      2  Private          DR  Moderate","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>image</th>\n      <th>level</th>\n      <th>Usage</th>\n      <th>binary_type</th>\n      <th>type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1_left.jpg</td>\n      <td>0</td>\n      <td>Private</td>\n      <td>No_DR</td>\n      <td>No_DR</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1_right.jpg</td>\n      <td>0</td>\n      <td>Private</td>\n      <td>No_DR</td>\n      <td>No_DR</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2_left.jpg</td>\n      <td>0</td>\n      <td>Public</td>\n      <td>No_DR</td>\n      <td>No_DR</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2_right.jpg</td>\n      <td>0</td>\n      <td>Public</td>\n      <td>No_DR</td>\n      <td>No_DR</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3_left.jpg</td>\n      <td>2</td>\n      <td>Private</td>\n      <td>DR</td>\n      <td>Moderate</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test_datagen = ImageDataGenerator(rescale=1./255)","metadata":{"execution":{"iopub.status.busy":"2024-10-12T06:09:06.838265Z","iopub.execute_input":"2024-10-12T06:09:06.838652Z","iopub.status.idle":"2024-10-12T06:09:06.843055Z","shell.execute_reply.started":"2024-10-12T06:09:06.838615Z","shell.execute_reply":"2024-10-12T06:09:06.842096Z"},"trusted":true},"execution_count":40,"outputs":[]},{"cell_type":"code","source":"test_generator = test_datagen.flow_from_dataframe(\n    dataframe=test_data,\n    directory='/kaggle/input/resized-2015-2019-blindness-detection-images/resized test 15',\n    x_col='image',\n    y_col='binary_type',\n    target_size=IMAGE_SIZE,\n    batch_size=BATCH_SIZE,\n    class_mode='binary')","metadata":{"execution":{"iopub.status.busy":"2024-10-12T06:09:09.500185Z","iopub.execute_input":"2024-10-12T06:09:09.500569Z","iopub.status.idle":"2024-10-12T06:12:48.649967Z","shell.execute_reply.started":"2024-10-12T06:09:09.500532Z","shell.execute_reply":"2024-10-12T06:12:48.648928Z"},"trusted":true},"execution_count":41,"outputs":[{"name":"stdout","text":"Found 53576 validated image filenames belonging to 2 classes.\n","output_type":"stream"}]},{"cell_type":"code","source":"# Use evaluate() \nloss, acc = model_resnet50.evaluate(test_generator, verbose=1)\nprint(\"Loss: \", loss)\nprint(\"Accuracy: \", acc)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-12T06:13:00.243558Z","iopub.execute_input":"2024-10-12T06:13:00.244220Z","iopub.status.idle":"2024-10-12T06:27:37.889617Z","shell.execute_reply.started":"2024-10-12T06:13:00.244181Z","shell.execute_reply":"2024-10-12T06:27:37.888645Z"},"trusted":true},"execution_count":42,"outputs":[{"name":"stdout","text":"\u001b[1m   1/3349\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m9:19\u001b[0m 167ms/step - acc: 0.6875 - loss: 4.9820","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n  self._warn_if_super_not_called()\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m3349/3349\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m877s\u001b[0m 262ms/step - acc: 0.7531 - loss: 3.8575\nLoss:  3.913132667541504\nAccuracy:  0.7494027018547058\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Evaluate Model on Test Data","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import roc_auc_score, confusion_matrix\n\n# Predict probabilities (for binary classification, only one probability per sample)\ny_pred_probs = model_resnet50.predict(test_generator)  # Predict probabilities (for class 1)\ny_pred_classes = (y_pred_probs > 0.5).astype(int)  # Threshold at 0.5 to convert to class labels (0 or 1)\ny_true = test_generator.classes  # True labels\n\n","metadata":{"execution":{"iopub.status.busy":"2024-10-12T06:27:55.343962Z","iopub.execute_input":"2024-10-12T06:27:55.345034Z","iopub.status.idle":"2024-10-12T06:35:50.746435Z","shell.execute_reply.started":"2024-10-12T06:27:55.344978Z","shell.execute_reply":"2024-10-12T06:35:50.745487Z"},"trusted":true},"execution_count":44,"outputs":[{"name":"stdout","text":"\u001b[1m3349/3349\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m473s\u001b[0m 140ms/step\n","output_type":"stream"}]},{"cell_type":"code","source":"\n# Calculate AUC\nauc = roc_auc_score(y_true, y_pred_probs)  # No need to select [:, 1] as it's a binary output\nprint(f\"AUC: {auc:.4f}\")\n\n# Calculate Confusion Matrix\ncm = confusion_matrix(y_true, y_pred_classes)\n\n# Extract TN, FP, FN, TP from the confusion matrix\ntn, fp, fn, tp = cm.ravel()\n\n# Sensitivity (True Positive Rate or Recall)\nsensitivity = tp / (tp + fn)\nprint(f\"Sensitivity (Recall): {sensitivity:.4f}\")\n\n# Specificity (True Negative Rate)\nspecificity = tn / (tn + fp)\nprint(f\"Specificity: {specificity:.4f}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-10-12T06:36:33.612621Z","iopub.execute_input":"2024-10-12T06:36:33.613019Z","iopub.status.idle":"2024-10-12T06:36:33.671108Z","shell.execute_reply.started":"2024-10-12T06:36:33.612980Z","shell.execute_reply":"2024-10-12T06:36:33.670175Z"},"trusted":true},"execution_count":45,"outputs":[{"name":"stdout","text":"AUC: 0.4987\nSensitivity (Recall): 0.9616\nSpecificity: 0.0392\n","output_type":"stream"}]},{"cell_type":"code","source":" #Calculate Confusion Matrix\ncm = confusion_matrix(y_true, y_pred_classes)\n\n# Print Confusion Matrix\nprint(\"Confusion Matrix:\")\nprint(cm)","metadata":{"execution":{"iopub.status.busy":"2024-10-12T06:36:39.831605Z","iopub.execute_input":"2024-10-12T06:36:39.832415Z","iopub.status.idle":"2024-10-12T06:36:39.855332Z","shell.execute_reply.started":"2024-10-12T06:36:39.832376Z","shell.execute_reply":"2024-10-12T06:36:39.854430Z"},"trusted":true},"execution_count":46,"outputs":[{"name":"stdout","text":"Confusion Matrix:\n[[  550 13493]\n [ 1519 38014]]\n","output_type":"stream"}]},{"cell_type":"code","source":"# Plot the confusion matrix using Seaborn's heatmap\nplt.figure(figsize=(6, 4))\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False,\n            xticklabels=['Predicted 0', 'Predicted 1'],\n            yticklabels=['Actual 0', 'Actual 1'])\n\nplt.xlabel('Predicted Labels')\nplt.ylabel('True Labels')\nplt.title('Confusion Matrix')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-10-12T06:36:43.324088Z","iopub.execute_input":"2024-10-12T06:36:43.324487Z","iopub.status.idle":"2024-10-12T06:36:43.367496Z","shell.execute_reply.started":"2024-10-12T06:36:43.324449Z","shell.execute_reply":"2024-10-12T06:36:43.366190Z"},"trusted":true},"execution_count":47,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[47], line 3\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# Plot the confusion matrix using Seaborn's heatmap\u001b[39;00m\n\u001b[1;32m      2\u001b[0m plt\u001b[38;5;241m.\u001b[39mfigure(figsize\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m6\u001b[39m, \u001b[38;5;241m4\u001b[39m))\n\u001b[0;32m----> 3\u001b[0m \u001b[43msns\u001b[49m\u001b[38;5;241m.\u001b[39mheatmap(cm, annot\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m, fmt\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124md\u001b[39m\u001b[38;5;124m'\u001b[39m, cmap\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mBlues\u001b[39m\u001b[38;5;124m'\u001b[39m, cbar\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m,\n\u001b[1;32m      4\u001b[0m             xticklabels\u001b[38;5;241m=\u001b[39m[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mPredicted 0\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mPredicted 1\u001b[39m\u001b[38;5;124m'\u001b[39m],\n\u001b[1;32m      5\u001b[0m             yticklabels\u001b[38;5;241m=\u001b[39m[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mActual 0\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mActual 1\u001b[39m\u001b[38;5;124m'\u001b[39m])\n\u001b[1;32m      7\u001b[0m plt\u001b[38;5;241m.\u001b[39mxlabel(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mPredicted Labels\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m      8\u001b[0m plt\u001b[38;5;241m.\u001b[39mylabel(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mTrue Labels\u001b[39m\u001b[38;5;124m'\u001b[39m)\n","\u001b[0;31mNameError\u001b[0m: name 'sns' is not defined"],"ename":"NameError","evalue":"name 'sns' is not defined","output_type":"error"},{"output_type":"display_data","data":{"text/plain":"<Figure size 600x400 with 0 Axes>"},"metadata":{}}]},{"cell_type":"markdown","source":"# Ensemble models","metadata":{}},{"cell_type":"code","source":"def ensemble_predict(models, data):\n    predictions = [model.predict(data) for model in models]\n    avg_prediction = np.mean(predictions, axis=0)\n    return avg_prediction","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Get predictions using the average method\nmodels = [efficientnet_model, resnet_model]\nensemble_predictions = ensemble_predict(models, test_data)\n\n# Convert predictions to class labels\npredicted_labels = np.argmax(ensemble_predictions, axis=1)\n","metadata":{},"execution_count":null,"outputs":[]}]}